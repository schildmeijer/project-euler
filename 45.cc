#include <iostream>
#include <vector>
#include <NTL/ZZ.h>
#include <sstream>
#include <math.h>
#include <fstream>
#include <iterator>
#include <algorithm>
#include <map>
#include <set>
#include <bitset>
#include <utility>	//for std::make_pair
#include <boost/lambda/lambda.hpp>
#include <boost/foreach.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/algorithm/string.hpp>
#include <gmpxx.h>			//for c++

using namespace std;
using namespace NTL;
using namespace boost;

// Pentagonal, triangle, and hexagonal numbers are generated by the following formulae:
// Pentagonal 	  	Pn=n(3n-1)/2 	  	1, 5, 12, 22, 35, ...
// Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
// Hexagonal 	  	Hn=n(2n-1) 	  	1, 6, 15, 28, 45, ...

// It can be verified that T285 = P165 = H143 = 40755.

// Find the next triangle number that is also pentagonal and hexagonal.

int main(int argc, char **argv){
	//NB. because all elements in Hexagonal, also is a part of the Triangles, triangales is superfluous
	vector<ZZ> pents, hexs;
	static const unsigned long MAX = 100000;
	pents.reserve(MAX);					// reserve for faster insertion	
	hexs.reserve(MAX);
	pents.push_back(to_ZZ(0));			// dummy, so index 1 == pentagonal number 1.
	hexs.push_back(to_ZZ(0));	
	for (ZZ n = to_ZZ(1); n <= MAX; ++n) 
	 	pents.push_back(n*(3*n-1)/2);
	for (ZZ n = to_ZZ(1); n <= MAX; ++n) 
	 	hexs.push_back(n*(2*n-1));
	  set_intersection(hexs.begin()+285, hexs.end(), pents.begin()+285, pents.end(), ostream_iterator<ZZ>(cout, " "));
} 	