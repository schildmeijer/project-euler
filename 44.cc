#include <iostream>
#include <vector>
#include <NTL/ZZ.h>
#include <sstream>
#include <math.h>
#include <fstream>
#include <iterator>
#include <algorithm>
#include <map>
#include <set>
#include <bitset>
#include <utility>	//for std::make_pair
#include <boost/lambda/lambda.hpp>
#include <boost/foreach.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/algorithm/string.hpp>
#include <gmpxx.h>			//for c++

using namespace std;
using namespace NTL;
using namespace boost;

// Pentagonal numbers are generated by the formula, P_{n}=n*(3n-1)/2. The first ten pentagonal numbers are:
// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 - 22 = 48, is not pentagonal.

// Find the smallest pair of pentagonal numbers for which their sum and difference is pentagonal; what is their difference?

bool check(int i, int j, const vector<int> &pents) {
	return binary_search(pents.begin(), pents.end(), pents[i]+pents[j]) && binary_search(pents.begin(), pents.end(), pents[j]-pents[i]);
}
int main(int argc, char **argv){
	vector<int> pents;
	static const int MAX = 2400;
	pents.reserve(MAX);
	pents.push_back(0);			// dummy, so index 1 == pentagonal number 1.
	for (int n = 1; n <= MAX; ++n) 
	 	pents.push_back(n*(3*n-1)/2);

	for (int i = 1; i <= MAX; ++i)
		for (int j = i+1; j <= MAX; ++j) 
			if (check(i,j, pents)) 
				cout << "diff: " << pents[j]-pents[i] << endl;
} 	